<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">
    
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/park.properties" />
	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<context:component-scan base-package="com.langmy.terminal" use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan> 

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/assets/**" location="/assets/" />
	<mvc:resources mapping="/bower_components/**" location="/bower_components/" />
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/css/**" location="/css/" /> 

	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
	    <mvc:message-converters>  
	        <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">  
                    <property name="supportedMediaTypes">  
                        <list>  
                            <value>application/json;charset=UTF-8</value>
                        </list>  
                    </property>
                    <property name="features">
			          <array>
			            <value>WriteMapNullValue</value>
			            <value>WriteNullStringAsEmpty</value>
			          </array>
			        </property>  
            </bean>  
	    </mvc:message-converters>  
	</mvc:annotation-driven>
	
	
    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="mediaTypes" >
	        <map> 
                <entry key="xml" value="application/xml"/> 
                <entry key="json" value="application/json"/> 
            </map>
	    </property>
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="favorPathExtension" value="true"/>
	</bean>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/views/" />
		<property name="suffix" value=".jsp" />
		<property name="contentType" value="text/html;charset=utf-8"></property>
	</bean>
	
	<!-- 定义无Controller的path<->view直接映射,默认访问跳转界面 -->
	<mvc:view-controller path="/" view-name="redirect:/admin/login"/> 
	
	<!-- 支持Shiro对Controller的方法级AOP安全控制 begin-->
	<!-- 以下这个bean在spring-context-shiro.xml中也进行了定义		原因是： -->
	<!-- 
		定义在spring-mvc.xml里的对象，在applicationContext*.xml中是不可见的，
		想共享的东西最好放在applicationContext.xml那边。
		而applicationContext*.xml里的一些BeanPostProccesor，
		也不会作用到spring-mvc.xml定义/扫描到的Bean上，
		如果有必要就在spring-mvc.xml里重新定义一次，像Shiro的AOP校验权限。
	 -->
	 
	<bean  
	    class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">  
	    <property name="interceptors">  
	        <list>  
	            <ref bean="openEntityManagerInViewInterceptor" />  
	        </list>  
	    </property>   
	</bean>
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> 
	 
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<!-- 用AOP控制方法时，把DefaultAdvisorAutoProxyCreator的proxyTargetClass属性设为true，与事务AOP一起使用cglib -->
		<property name="proxyTargetClass" value="true" />
	</bean> 
	
    <bean id="conversion-service" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
    
    <!-- 注册验证器 -->  
	<mvc:annotation-driven validator="validator" />
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>
        <!--不设置则默认为classpath下的ValidationMessages.properties -->
        <property name="validationMessageSource" ref="validatemessageSource"/>
    </bean>
    <bean id="validatemessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <property name="basenames">  
	        <list>  
	            <!-- <value>classpath:messages/messages</value>  --> 
	            <value>classpath:validatemessages</value>  
	        </list>  
	    </property> 
        <property name="fileEncodings" value="utf-8"/>  
        <property name="cacheSeconds" value="120"/>
        <property name="useCodeAsDefaultMessage" value="true" />  
	</bean>
	
	<!-- 
		通过SimpleMappingExceptionResolver我们可以将不同的异常映射到不同的jsp页面（通过exceptionMappings属性的配置）。
		同时我们也可以为所有的异常指定一个默认的异常提示页面（通过defaultErrorView属性的配置），
		如果所抛出的异常在exceptionMappings中没有对应的映射，则Spring将用此默认配置显示异常信息。
		注意这里配置的异常显示界面均仅包括主文件名，至于文件路径和后缀已经在viewResolver中指定。如/error/error表示/error/error.jsp
	-->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">    
        <property name="exceptionMappings">  
            <props>  
                <prop key="org.apache.shiro.authz.UnauthorizedException">/error/500</prop>
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">/error/500</prop>
            </props>  
        </property>  
    </bean>   
	<!-- Shiro end -->
	
	<!-- 上传文件拦截，设置最大上传文件大小   100M=100*1024*1024(B)=104857600 bytes -->  
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
		<property name="defaultEncoding" value="utf-8" />  
		<property name="maxUploadSize" value="104857600" />  
		<property name="maxInMemorySize" value="40960" />  
	</bean>  
	
	<!-- SpringMVC 定时器 -->
	<!-- 开启注解 -->
	<mvc:annotation-driven/>
	<!-- 定时器配置 
    task:executor/@pool-size：可以指定执行线程池的初始大小、最大大小 
    task:executor/@queue-capacity：等待执行的任务队列的容量 
    task:executor/@rejection-policy：当等待队已满时的策略，分为丢弃、由任务执行器直接运行等方式 
 	 -->
 	 <context:component-scan base-package="com.langmy.terminal" />
    <task:scheduler id="scheduler" pool-size="10" />  
    <task:executor id="executor" keep-alive="3600" pool-size="100-200" 
    queue-capacity="500" rejection-policy="CALLER_RUNS" /> 
    <task:annotation-driven executor="executor" scheduler="scheduler" />
</beans>
