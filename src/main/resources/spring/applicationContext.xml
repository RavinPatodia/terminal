<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"  
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
		
	default-lazy-init="true">
           
    <context:annotation-config />
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.langmy.terminal"><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan> 
	
	<tx:annotation-driven transaction-manager="txManager" /><!--@Transactional这个注解进行的驱动，这是基于注解的方式使用事务配置声明 -->
	<jpa:repositories base-package="com.langmy.terminal"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>
	
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:park.properties</value>
		</property>
	</bean>
	
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		    <property name="messageConverters">
		        <list>
		            <bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"/>
		            <bean class="org.springframework.http.converter.FormHttpMessageConverter"/>
		            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"/>
		        </list>
		    </property>
	</bean>

	<!-- 缓存配置 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:cache/ehcache-local.xml" />
	</bean>

	<!-- 配置 JSR303 Bean Validator 定义 -->
	<!-- <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" /> -->

	<bean id="baseDataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
        <!-- druid 连接池的 -->
		<property name="filters" value="stat" />
		
		<property name="maxActive" value="20" />  
	    <property name="initialSize" value="1" />  
	    <property name="maxWait" value="60000" />  
	    <property name="minIdle" value="1" />  
	   
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />  
	    <property name="minEvictableIdleTimeMillis" value="300000" />  
	   
	    <property name="validationQuery" value="SELECT 'x'" />  
	    <property name="testWhileIdle" value="true" />  
	    <property name="testOnBorrow" value="false" />  
	    <property name="testOnReturn" value="false" />  
	</bean>
	
	<bean id="adminDataSource" parent="baseDataSource">  
        <property name="url" value="${jdbc.url}" />
    </bean>  
    
    <bean id="logDataSource" parent="baseDataSource">  
        <property name="url" value="${log.url}" />
    </bean>
    
	<bean id="dataSource" class="com.langmy.terminal.common.datasource.DynamicDataSource">  
       <property name="targetDataSources">  
          <map key-type="java.lang.String">  
             <entry key="logDataSource" value-ref="logDataSource"/>  
             <entry key="adminDataSource" value-ref="adminDataSource"/>  
          </map>  
       </property>
       <property name="defaultTargetDataSource" ref="adminDataSource"/>  
    </bean>
	
	<bean id="entityManagerFactory" class= "org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
 		<property name="dataSource" ref="dataSource"/>
 		<property name="packagesToScan" value="com.langmy.terminal"/>
        <property name="persistenceProvider">
            <bean class="org.hibernate.ejb.HibernatePersistence"/>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="false"/>
                <property name="database" value="MYSQL"/>
                <property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
                <property name="showSql" value="true"/>
            </bean>
        </property>
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>
    </bean> 
	
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"> 
 		<property name="entityManagerFactory" ref="entityManagerFactory"/> 
 	</bean> 
 	
 	<!-- 建立视图内拦截器来解决JPA中访问延迟加载属性时产生的无会话异常 -->  
    <!-- LazyInitializationException: could not initialize proxy no session -->  
    <!-- 此拦截器会注入到servlet配置中的DefaultAnnotationHandlerMapping中 -->  
    <bean name="openEntityManagerInViewInterceptor"   
        class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor">  
        <property name="entityManagerFactory">  
        <ref bean="entityManagerFactory" />  
        </property>  
    </bean>
    

	<!-- 面向切面控制权限 -->
	<aop:config>
		<aop:pointcut expression="execution(public * com.langmy.terminal.modules.*.service.*.*(..))"
			id="bussinessService" />
		<aop:advisor pointcut-ref="bussinessService" advice-ref="txAdvice" />
	</aop:config>

	<!-- 谏言 -->
	<!-- 事务 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true" /><!--以get开头的方法只能从数据库中读取数据  -->
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="load*" propagation="REQUIRED" read-only="true" />
            <tx:method name="search*" propagation="REQUIRED"  read-only="true"/>
            <tx:method name="datagrid*" propagation="REQUIRED"  read-only="true"/>
            <tx:method name="list*" propagation="REQUIRED"  read-only="true"/>
            
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/><!--以add开头的方法能对数据库进行查询、新增、删除、编辑1  -->
            <tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="repair" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="deleteAndRepair" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="put*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="restart*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="stop*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="change*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="check*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="start*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="effectHistory" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="disable*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="enable*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="close*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="open*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="drag*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="set*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="configure" propagation="REQUIRED" rollback-for="Exception"/>
            
            
		</tx:attributes>
	</tx:advice>
</beans>